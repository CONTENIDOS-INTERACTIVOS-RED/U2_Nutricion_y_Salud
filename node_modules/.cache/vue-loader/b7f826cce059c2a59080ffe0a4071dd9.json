{"remainingRequest":"/home/runner/work/U2_Nutricion_y_Salud/U2_Nutricion_y_Salud/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Nutricion_y_Salud/U2_Nutricion_y_Salud/src/views/curso/Tema1.vue?vue&type=template&id=7c7821d6&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Nutricion_y_Salud/U2_Nutricion_y_Salud/src/views/curso/Tema1.vue","mtime":1751569438594},{"path":"/home/runner/work/U2_Nutricion_y_Salud/U2_Nutricion_y_Salud/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Nutricion_y_Salud/U2_Nutricion_y_Salud/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Nutricion_y_Salud/U2_Nutricion_y_Salud/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Nutricion_y_Salud/U2_Nutricion_y_Salud/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Nutricion_y_Salud/U2_Nutricion_y_Salud/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}